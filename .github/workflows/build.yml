name: "Publish to PyPI and release packages"

on:
  workflow_run:
    workflows: [Run unit tests]
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: cachix/install-nix-action@v25

      - name: Install
        run: nix develop --impure --accept-flake-config --command poetry install

      - name: Build
        run: nix develop --impure --accept-flake-config --command poetry build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'
    needs:
      - build

    environment:
      name: testpypi
      url: https://test.pypi.org/p/tbc-video-export

    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build

    environment:
      name: pypi
      url: https://pypi.org/p/tbc-video-export
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Sign the packages with Sigstore and upload them to GitHub Release
    runs-on: ubuntu-latest

    needs:
      - publish-to-pypi

    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases
      id-token: write # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}

        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  build-appimage:
    name: Build AppImage package
    runs-on: ubuntu-latest

    needs:
      - github-release

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: cachix/install-nix-action@v25

      - name: Install
        run: nix develop --impure --accept-flake-config --command poetry install --with=appimage

      - name: Build AppImage
        run: nix develop --impure --accept-flake-config --command poetry run python-appimage build app -p 3.10 appimage/

      - name: Rename AppImage file
        run: mv tbc-video-export-x86_64.AppImage tbc-video-export.AppImage

      # AppImages require libfuse to run
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: fuse
          version: 1.0

      - name: Test AppImage
        run: ./tbc-video-export.AppImage --version

      - name: Upload AppImage to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}

        run: >-
          gh release upload
          '${{ github.ref_name }}' 'tbc-video-export.AppImage#tbc-video-export-${{ github.ref_name }}.AppImage'
          --repo '${{ github.repository }}'

  build-windows-binary:
    name: Build Windows binary with PyInstaller
    runs-on: windows-latest

    needs:
      - github-release

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Environment
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          pip install poetry

          New-Item -ItemType Directory -Path .\build

      - name: Setup dependencies
        run: |
          .\.venv\Scripts\Activate.ps1
          poetry install --with=pyinstaller

      - name: Create PyInstaller binary
        run: |
          .\.venv\Scripts\Activate.ps1
          poetry run python .\pyinstaller\build_windows.py

      - name: Test binary
        run: .\dist\tbc-video-export.exe --version

      - name: Upload binary to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}

        run: >-
          gh release upload
          '${{ github.ref_name }}' '.\dist\tbc-video-export.exe#tbc-video-export-${{ github.ref_name }}.exe'
          --repo '${{ github.repository }}'
